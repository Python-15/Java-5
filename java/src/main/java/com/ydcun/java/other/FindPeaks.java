/**
 * 
 */
package com.ydcun.java.other;

import java.util.Arrays;
import java.util.List;
import java.util.Vector;

/**
 * @author ydcun-psjs
 *  matlab findPeaks函数java实现
 */
public class FindPeaks {
	//参数：数组，数组大小  
	public static void findPeaks(double[] num)  
	{  
		int count = num.length;
	    Vector<Integer> sign = new Vector<Integer>();  
	    for(int i = 1;i<count;i++)  
	    {  
	        /*相邻值做差： 
	         *小于0，赋-1 
	         *大于0，赋1 
	         *等于0，赋0 
	         */  
	        double diff = num[i] - num[i-1];  
	        if(diff>0)  
	        {  
	            sign.add(1);  
	        }  
	        else if(diff<0)  
	        {  
	            sign.add(-1);  
	        }  
	        else  
	        {  
	            sign.add(0);  
	        }  
	    }  
	    //再对sign相邻位做差  
	    //保存极大值和极小值的位置  
	    Vector<Integer> indMax = new Vector<Integer>();  
	    Vector<Integer> indMin = new Vector<Integer>();  
	  
	    for(int j = 1;j<sign.size();j++)  
	    {  
	        double diff = sign.get(j)-sign.get(j-1);  
	        if(diff<0)  
	        {  
	            indMax.add(j);  
	        }  
	        else if(diff>0)  
	        {  
	            indMin.add(j);  
	        }  
	    }  
	    System.out.println("极大值为:"+indMax.size());  
	    for(int m = 0;m<indMax.size();m++)  
	    {  
	    	System.out.print(num[indMax.get(m)]+ " ");
	    }  
	    System.out.println(); 
	    System.out.println("极小值为:"+indMin.size());  
	    for(int n = 0;n<indMin.size();n++)  
	    {  
	    	System.out.print(num[indMin.get(n)]+ " ");
	    }  
	}  
	  
	public static void main(String[] args) {
	    double a[] ={12.92541182381618,12.152880792659442,11.608804911346256,11.369462776258933,11.430677442514495,11.734326481719322,12.2049237300764,12.779412458433384,13.418600365119481,14.098444392921069,14.789319300767616,15.43719145318933,15.959793602098816,16.26380609905607,16.27872465361312,15.994006110790465,15.482306261814426,14.895134649772746,14.427057284112035,14.25703060747026,14.485640035186401,15.090707566831373,15.919071917581388,16.72066710417621,17.216426590860344,17.179359290892247,16.50294169525496,15.23478000178035,13.565026001590722,11.77413456046689,10.157785742293001,8.953468026739607,8.291136844946287,8.180611294400748,8.53483995787042,9.216005022464145,10.08506178916527,11.036747063429772,12.010251904868696,12.976981809784256,13.91640891338417,14.79510219442037,15.561137982080055,16.157716424676128,16.549703671980982,16.749467406254674,16.827114889597265,16.895873579776456,17.073754848198906,17.433591883889385,17.96040940052655,18.534703400649423,18.952227930358347,18.977990637873063,18.419112839740997,17.193037164146936,15.367598038431622,13.158013934912995,10.880016714563418,8.873051662612317,7.417447586273825,6.671092323740829,6.643956823612488,7.215539227292309,8.185878171118006,9.340436944155659,10.506437310465094,11.583700464484865,12.544202516251902,13.406801893671549,14.20216648792959,14.944702824526253,15.622990670482324,16.2104432286863,16.68798424311664,17.06474578060523,17.3836189911574,17.705586097053867,18.077095343658332,18.49383968226288,18.8780896443502,19.08323351451097,18.92938639517543,18.26149205288476,17.011165907146015,15.239849958876572,13.145523765511438,11.026903513962965,9.21366827463667,7.983438988599198,7.491440661959597,7.734968665523908,8.56324730625188,9.728159144521989,10.958080161534358,12.030372081305863,12.820153149987899,13.312706442414353,13.58040226394093,13.737158218279653,13.889818169601128,14.104381311961099,14.396838313137295,14.747133473175381,15.125182122217634,15.513785427187003,15.916165561804203,16.34422080911843,16.793708921275236,17.219924789855263,17.528705107674188,17.59197221327689,17.28664105796572,16.54477628039433,15.396034278760915,13.983819259705594,12.544578011974071,11.35256688783488,10.645482843351829,10.55453345399224,11.06249682706539,12.004784344578448,13.11436564265114,14.096697004691942,14.710825721568776,14.83120138124805,14.471909080214871,13.768300880753161};
	    findPeaks(a);  
	}  
}
